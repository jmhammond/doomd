#+TITLE: My Doom Emacs config
#+AUTHOR: John Hammond
#+EMAIL: jmhammond@gmail.com
#+LANGUAGE: en
#+STARTUP: noinlineimages
#+PROPERTY: header-args:emacs-lisp :tangle yes :cache no :results silent :padline no
#+OPTIONS: toc:nil

* Literate configuration
I'm attempting to re-write my configuration files as a better-documented literate configuration.

Basically I'm tired of copy-pasting my code wherever in the ~config.el~ and later forgetting where I put it so stuff is scattered.  We'll see if this is better...

** ~init.el~
I'm going to keep the ~init.el~ default for now.  [[https://github.com/tecosaur/emacs-config/blob/master/config.org][Tecosaur writes it via his config.el]], but I don't think I need that.

** ~config.el~
This file will be written when org does some ~org-tangle~-ing of the code. Hopefully.

* Front-matter
#+BEGIN_SRC emacs-lisp
;;; config.el --- -*- lexical-binding: t -*-
#+END_SRC

... and hopefully don't natively compile every package at upgrade time
#+begin_src emacs-lisp
(setq native-comp-deferred-compilation t)
#+end_src


** Personal information:
#+BEGIN_SRC emacs-lisp
(setq user-full-name "John Hammond"
      user-mail-address "jmhammond@gmail.com")
#+END_SRC


* User Interface
** Fonts
Default fonts first
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Source Code Pro" :size 16)
      doom-variable-pitch-font (font-spec :family "Georgia" :size 18)
      doom-serif-font (font-spec :family "Georgia" :size 18 )
      )
#+end_src

Mixing sans and serif'd fonts in desired modes:
#+begin_src emacs-lisp
(defvar mixed-pitch-modes '(org-mode LaTeX-mode markdown-mode gfm-mode Info-mode)
  "Modes that `mixed-pitch-mode' should be enabled in, but only after UI initialisation.")
(defun init-mixed-pitch-h ()
  "Hook `mixed-pitch-mode' into each mode in `mixed-pitch-modes'.
Also immediately enables `mixed-pitch-modes' if currently in one of the modes."
  (when (memq major-mode mixed-pitch-modes)
    (mixed-pitch-mode 1))
  (dolist (hook mixed-pitch-modes)
    (add-hook (intern (concat (symbol-name hook) "-hook")) #'mixed-pitch-mode)))
(add-hook 'doom-init-ui-hook #'init-mixed-pitch-h [[
]] )

(after! mixed-pitch
  (defface variable-pitch-serif
    '((t (:family "serif")))
    "A variable-pitch face with serifs."
    :group 'basic-faces)
  ;(setq mixed-pitch-set-height t)
  (setq variable-pitch-serif-font doom-variable-pitch-font)
  (set-face-attribute 'variable-pitch-serif nil :font variable-pitch-serif-font)
  (defun mixed-pitch-serif-mode (&optional arg)
    "Change the default face of the current buffer to a serifed variable pitch, while keeping some faces fixed pitch."
    (interactive)
    (let ((mixed-pitch-face 'variable-pitch-serif))
      (mixed-pitch-mode (or arg 'toggle)))))
#+end_src
** Tabs
~~Using tabs like I had in VS Code... apparently I liked them well enough there.~~
cancelled... I'm trying to roll back to less gui.  Use VS Code for GUI, emacs for emacs stuff.
#+begin_src emacs-lisp
;; (setq centaur-tabs-style "rounded")
;; (setq centaur-tabs-set-icons t)
;; (setq centaur-tabs-plain-icons t)
;; (setq centaur-tabs-set-bar 'over)
;; (setq centaur-tabs-set-modified-marker t)
#+end_src
'
** Theme
The modus themes are great. This /vivendi/ is dark and /operandi/ is light. You can switch between them with ~M-x modus-themes-toggle~
#+begin_src emacs-lisp
(setq doom-theme 'modus-vivendi)
#+end_src

... but ~solaire-mode~ that doom ships conflicts with it, so disable that:
#+begin_src emacs-lisp
(after! solaire-mode
  (solaire-global-mode -1))
#+end_src

Pretty headlines for orgmode
#+begin_src emacs-lisp
(setq modus-themes-headings
      '((1 . (rainbow overline 1.1))
        (2 . (rainbow 1.0))
        (t . (rainbow  1.0))
        ))
        ;(t . (rainbow 1.0))))
(setq modus-themes-scale-headings t)
#+end_src

We could choose to darken the org-blocks.  At this point, I choose not to.
#+begin_src emacs-lisp
(setq modus-themes-org-blocks nil) ;; 'gray-background)
#+end_src

*** TODO For the completion UI, I want more distinct visibility for the selected row
(this isn't working yet)
#+begin_src emacs-lisp
(setq modus-themes-completions
      '((matches . (extrabold underline intense))
        (selection . (semibold background accented intense))
        (popup . (accented))))
#+end_src
** Default gui stuff:
Basics on default frame size and I actually want scroll bars (for the visual indicator of where I am on a document)
#+begin_src emacs-lisp
(setq +doom-dashboard-banner-file (expand-file-name "coffeesquirrel.png" doom-private-dir)
      initial-frame-alist '((top . 1) (left . 1) (width . 100)  (height . 40)))

(setq scroll-bar-mode 'right)
(scroll-bar-mode)
#+end_src

I'm only on a macbook now:
#+begin_src emacs-lisp
  (setq mac-command-modifier      'super
        ns-command-modifier       'super
        mac-option-modifier       'meta
        ns-option-modifier        'meta
        ; it is a bug in emacs that external keyboards plugged in treat ALL modifier keys has right-modifiers... so make right modifer option to meta to get the standard alt behavior! https://github.com/hlissner/doom-emacs/issues/4178
        mac-right-option-modifier 'meta
        ns-right-option-modifier  'meta)
#+end_src

 make *Scratch* act like org-mode
 #+begin_src emacs-lisp
(setq doom-scratch-buffer-major-mode 'org-mode)
 #+end_src

~which-key~ popups are good.
#+begin_src emacs-lisp
(setq which-key-idle-delay 0.5)
(setq which-key-allow-multiple-replacements t)
(after! which-key
  (pushnew!
   which-key-replacement-alist
   '(("" . "\\`+?evil[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . "◂\\1"))
   '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . "◃\\1"))
   ))
#+end_src

Soft wrap is very important to me. I need to include this not only in ~config.el~ but also in ~init.el~.
#+begin_src emacs-lisp
(global-visual-line-mode +1)
; (setq +word-wrap-extra-indent 2)
(remove-hook 'text-mode-hook #'auto-fill-mode)
#+end_src

For split windows, be asked what to load:
#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (consult-buffer))
#+end_src

Disable the company idle popup -- work-around for org-tables and TAB
#+begin_src emacs-lisp
(setq company-idle-delay nil)
#+end_src

Apparently this helps somehow
#+begin_src emacs-lisp
(setq undo-tree-enable-undo-in-region nil)
#+end_src

And I really don't actually like the highlighted current line because it's creating too much noise in org-mode...?
#+begin_src emacs-lisp
(hl-line-mode -1)
#+end_src
** Treemacs
#+begin_src emacs-lisp
(with-eval-after-load 'treemacs
  (define-key treemacs-mode-map [mouse-1] #'treemacs-single-click-expand-action))
(after! treemacs
  (defvar treemacs-file-ignore-extensions '()
    "File extension which `treemacs-ignore-filter' will ensure are ignored")
  (defvar treemacs-file-ignore-globs '()
    "Globs which will are transformed to `treemacs-file-ignore-regexps' which `treemacs-ignore-filter' will ensure are ignored")
  (defvar treemacs-file-ignore-regexps '()
    "RegExps to be tested to ignore files, generated from `treeemacs-file-ignore-globs'")
  (defun treemacs-file-ignore-generate-regexps ()
    "Generate `treemacs-file-ignore-regexps' from `treemacs-file-ignore-globs'"
    (setq treemacs-file-ignore-regexps (mapcar 'dired-glob-regexp treemacs-file-ignore-globs)))
  (if (equal treemacs-file-ignore-globs '()) nil (treemacs-file-ignore-generate-regexps))
  (defun treemacs-ignore-filter (file full-path)
    "Ignore files specified by `treemacs-file-ignore-extensions', and `treemacs-file-ignore-regexps'"
    (or (member (file-name-extension file) treemacs-file-ignore-extensions)
        (let ((ignore-file nil))
          (dolist (regexp treemacs-file-ignore-regexps ignore-file)
            (setq ignore-file (or ignore-file (if (string-match-p regexp full-path) t nil)))))))
  (add-to-list 'treemacs-ignored-file-predicates #'treemacs-ignore-filter))

(after! treemacs
  (treemacs-follow-mode t)
  (treemacs-indent-guide-mode t)
  (setq treemacs-resize-icons 44
        treemacs-width 30
        treemacs-width-is-initially-locked nil
        treemacs-indent-guide-style 'line
        treemacs-file-ignore-extensions
        '(;; LaTeX
          "aux"
          "ptc"
          "fdb_latexmk"
          "fls"
          "synctex.gz"
          "toc"
          ;; LaTeX - glossary
          "glg"
          "glo"
          "gls"
          "glsdefs"
          "ist"
          "acn"
          "acr"
          "alg"
          ;; LaTeX - pgfplots
          "mw"
          ;; LaTeX - pdfx
          "pdfa.xmpi"
          )
        treemacs-file-ignore-globs
        '(;; LaTeX
          "*/_minted-*"
          ;; AucTeX
          "*/.auctex-auto"
          "*/_region_.log"
          "*/_region_.tex")))
#+end_src
** Autosave and auto-revert
I want to enable auto save so I don't lose changes; I also want to autorevert buffers that change on the disk because I'm using beorg on the phone, and if I mark a task as DONE, I want that reflected.

Autosave everything  (but after 20 seconds of idleness, so I can be in the middle of thoughts, say in org-capture window and not have it save and remove my C-c C-c functionality)
#+begin_src emacs-lisp 
(setq auto-save-visited-interval 20)
(auto-save-visited-mode +1)
#+end_src

... but don't delete trailing whitespace. Because autosave runs sometimes when I pause after a word, I end up with sentences thatlooklikethis and have to remember to type an extra space after the save.
The mode responsible was ~ws-butler~ which cleans up whitespace. That's normally fine /except/ when I'm in the middle of a thought, when it's annoying. This flag here will keep the whitespace at the cursor in the ~buffer~ but remove it from the saved ~file~. So I can keep going and do my thing and keep typing and the white space will eventually stick around, but it will also be doing the right thing for all the extra whitespace I don't want to keep around.
#+begin_src emacs-lisp
(after! ws-butler
  (setq ws-butler-keep-whitespace-before-point t))
#+end_src 

#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src
** Vertico (like helm/ivy)
#+begin_src emacs-lisp
(setq! orderless-matching-styles
       ; '(orderless-literal orderless-regexp orderless-flex)
       '(orderless-literal orderless-flex)
       )
#+end_src
** Desired tweaks to evil-mode

let f, s, etc, find on visual lines
#+begin_src emacs-lisp
(setq evil-cross-lines t)
#+end_src

and let myself go up and down on visual lines
#+begin_src emacs-lisp
(setq evil-respect-visual-line-mode t)
#+end_src


#+begin_src emacs-lisp
(setq   evil-snipe-scope 'buffer)
#+end_src

#+begin_src emacs-lisp
(after! evil
  (setq evil-ex-substitute-global t
        evil-move-cursor-back nil       ; Don't move the block cursor when toggling insert mode;
        evil-kill-on-visual-paste nil)) ; Don't put overwritten text in the kill ring)
#+end_src


#+begin_src emacs-lisp
(defun +evil-embrace-dollars-h ()
  (embrace-add-pair ?$ "$" "$"))
(add-hook 'org-mode-hook #'+evil-embrace-dollars-h)
(add-hook 'nxml-mode-hook #'+evil-embrace-dollars-h) ; <-- why in xml mode? there it's <m>...
#+end_src

** Modeline
Make the bottom bar of emacs pretty.
#+begin_src emacs-lisp
(setq
 doom-modeline-icon (display-graphic-p)
 doom-modeline-major-mode-icon t
 doom-modeline-major-mode-color-icon t
 doom-modeline-height 1
 doom-modeline-buffer-state-icon t)
(setq all-the-icons-scale-factor 1.0)
(custom-set-faces!
  '(mode-line :family "Fira Code" :height 1.0)
  '(mode-line-inactive :family "Fira Code" :height 1.0))

(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))
(add-hook! 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+end_src

** Popups
#+begin_src emacs-lisp
(set-popup-rules!
  '(
    ("^\\*Warnings" :select t)
    ("^\\*compilation" :select t)
    ("^\\*Completions" :slot -1 :ttl 0)
    ("^\\*\\(?:scratch\\|Messages\\)" :ttl t)
    ("^\\*Help" :slot -1 :size 0.4 :select t)
    ("^\\*doom:"
     :size 0.35 :select t :modeline t :quit t :ttl t)))

; With no error, get rid of the compile window
(add-hook 'compilation-finish-functions
          (lambda (buf str)
            (if (null (string-match ".*exited abnormally.*" str))
                (progn
                  (run-at-time
                   "0.3 sec" nil 'delete-windows-on buf)
                  (message "No Compilation Errors.")))))
#+end_src

** Key maps / Key bindings
:PROPERTIES:
:ID:       ca56ead1-fe97-469d-8a54-0eb28e001553
:END:
🍎+N and 🍎+W (CMD+n CMD+w) should open/close a new /frame/ not a new buffer.  "Frame" means "window"
#+begin_src emacs-lisp
(map! :g "s-n" :desc "Open a new frame" #'make-frame-command)
(map! :g "s-w" :desc "Close a frame" #'delete-frame)
#+end_src

I also want CMD+k to  insert link (in org mode) because that's a common command in other programs, but not mapped to anything in emacs.
#+begin_src emacs-lisp
(map! :g "s-k" :desc "Insert a link" #'org-insert-link)
#+end_src

For treemacs
#+begin_src emacs-lisp
(map! :g "M-0" #'treemacs-select-window)
(map! :g "M-o" #'treemacs-select-window)
#+end_src

#+begin_src emacs-lisp
(map! :ne "M-/" #'comment-or-uncomment-region)
#+end_src

unmap tab from company and yas-snippets in insert mode:
#+begin_src emacs-lisp
(map! :map company-keymap "TAB" nil)
(map! :map yas-keymap "TAB" nil)
#+end_src

#+begin_src  emacs-lisp
(map! :leader
      ;; prefer the unshifted semicolon for Ex commands
      ";" 'execute-extended-command
      ":" 'eval-expression)
(map! :i
      ;; use caps(ctrl) + ; to trigger the M-x command list
      "C-;" 'execute-extended-command)
;(map! :mode org-mode :n "S-TAB" 'org-cycle)

#+end_src

Use ~org-ql~ to find headings in the current buffer or in the agenda files (I don't use agenda, though)
#+begin_src emacs-lisp
(map! :leader :desc "Org-ql-find headline entry in file" "o f" #'org-ql-find)
(map! :leader :desc "Org-ql-find headline entry in agenda" "o F" #'org-ql-find-in-agenda)
#+end_src

** Markdown
I want ~evil-markdown~ to also handle the M-k M-j list up/down when in insert mode (as orgmode does):
#+begin_src emacs-lisp
(after! evil-markdown
        (map! :i "M-k" 'markdown-move-up)
        (map! :i "M-j" 'markdown-move-down)
)
#+end_src

** Math preview
The =math-preview= package works even in nxml mode!
#+begin_src emacs-lisp
(setq math-preview-tex-macros
   '(("ddx" "\\frac{d#2}{d#1}" 2 "t")
     ("and" . "\\mbox{ and }"))
   math-preview-tex-marks
   '(("\\begin{equation}" "\\end{equation}")
     ("\\begin{equation*}" "\\end{equation*}")
     ("\\[" "\\]")
     ("$$" "$$")
     ("<m>" "</m>")
     ("<me>" "</me>")
     ("<mrow>" "</mrow>")))
#+end_src

** Line Numbers and padding
:PROPERTIES:
:ID:       4021a029-e877-4c99-9ec5-f66cbda5a578
:END:
In =text-mode= buffers, I do not want line numbers, but I DO want the padding that the line numbers used to take up.  I like that extra space on the left side of the screen my eyes are accustomed to.


[[https://discourse.doomemacs.org/t/setting-window-margins-for-particular-buffers-org-in-particular/2868/6][Code help thanks to tecosaur]] (since modified to the point where most is his, some is mine)
#+begin_src emacs-lisp
(defvar +text-mode-left-margin-width 3
  "The `left-margin-width' to be used in `text-mode' buffers.")

(defun +setup-text-mode-left-margin ()
  (when (derived-mode-p 'text-mode)
    (setq left-margin-width (if display-line-numbers
                                0 +text-mode-left-margin-width))
    (set-window-buffer (get-buffer-window (current-buffer))
                       (current-buffer))))
#+end_src

Now we just need to hook this up to all the events which could either indicate a change in the conditions, or a require the setup to be re-applied.  But, if I'm in =writeroom-mode=, this creates a conflict, so we attach hooks to writeroom enable and disable

Default, emacs opening:
#+begin_src emacs-lisp
(add-hook 'window-configuration-change-hook #'+setup-text-mode-left-margin)
(add-hook 'display-line-numbers-mode-hook #'+setup-text-mode-left-margin)
(add-hook 'text-mode-hook #'+setup-text-mode-left-margin)
#+end_src

For entering or leaving =writeroom-mode=
#+begin_src emacs-lisp
(defun +leaving-writeroom-mode-left-margin ()
  (add-hook 'window-configuration-change-hook #'+setup-text-mode-left-margin)
  (add-hook 'display-line-numbers-mode-hook #'+setup-text-mode-left-margin)
  (add-hook 'text-mode-hook #'+setup-text-mode-left-margin)
  )

(defun +entering-writeroom-mode-left-margin ()
  (remove-hook 'window-configuration-change-hook #'+setup-text-mode-left-margin)
  (remove-hook 'display-line-numbers-mode-hook #'+setup-text-mode-left-margin)
  (remove-hook 'text-mode-hook #'+setup-text-mode-left-margin)
  )

(add-hook 'writeroom-mode-disable-hook #'+setup-text-mode-left-margin)
(add-hook 'writeroom-mode-disable-hook #'+leaving-writeroom-mode-left-margin)

(add-hook 'writeroom-mode-enable-hook #'+entering-writeroom-mode-left-margin)
#+end_src


There’s one little niggle with Doom, as doom/toggle-line-numbers doesn’t run display-line-numbers-mode-hook, so some advice is needed.
#+begin_src emacs-lisp
(defadvice! +doom/toggle-line-numbers--call-hook-a ()
  :after #'doom/toggle-line-numbers
  (run-hooks 'display-line-numbers-mode-hook))
#+end_src

Finally, we remove line numbers from text modes:
#+begin_src emacs-lisp
(remove-hook 'text-mode-hook #'display-line-numbers-mode)
#+end_src

** Writeroom mode
Tweaks to make =writeroom-mode= nicer for me.

By default, Doom's =zen= package scales up font a lot, let's scale it back down a smidge.
#+begin_src emacs-lisp
(setq +zen-text-scale 0.8)
#+end_src

Interestingly, the =+zen-text-scale= doesn't impact code blocks like the one you see above; those faces are different.  I don't think that (in general) I'll be using =writeroom-mode= for writing mixed documents like this one, so it'll be fine for now.


Now, text isn't actually centered because =writeroom-mode= adds the line number width to the left side, causing it to visually balance if you had line numbers, but I don't, so let's ask it not to:
#+begin_src emacs-lisp
(setq writeroom-full-line-number-width 0)
#+end_src


* Languages
** Language Server Protocol

I haven't done anything to configure these; just asking Doom to install it for latex and python made it work out of the box. If I need custom configurations, I'll include those here.

... and honestly, I'm using VS Code mostly... but I still love org-mode... (jq April 30, 2024)

** LaTeX
#+begin_src emacs-lisp
(when (equal system-type 'darwin)
  (setq insert-directory-program "/opt/homebrew/bin/gls")
  ;; For macos auctex building
  (setenv "PATH" (concat (getenv "PATH") ":/Library/TeX/texbin/"))
  (setq exec-path (append exec-path '("/Library/TeX/texbin/")))
  )
#+end_src

Still haven't settled on what I actually want on this below, but I also don't spend a lot of time directly editing latex files anymore, which is nice...
#+begin_src emacs-lisp
;; First, dump smartparens in AucTex, then use Auctex's own electric bracket and math closures
;(add-hook 'LaTeX-mode-hook #'turn-off-smartparens-mode)
(setq TeX-electric-sub-and-superscript nil)
;; (setq LaTeX-electric-left-right-brace 't)
;; (setq TeX-electric-math (cons "$" "$"))
#+end_src

Ignore unnecessary tex files and such in find-file
#+begin_src emacs-lisp
(after! counsel
  (setq counsel-find-file-ignore-regexp "\\(?:^#\\)\\|\\(?:[#~]$\\)\\|\\(?:^Icon?\\)\\|\\(aux\\)\\|\\(fdb_latexmk\\)\\|\\(fls\\)\\|\\(out\\)\\|\\(synctex\\)\\|\\(pdf\\)\\|\\(log\\)"))
#+end_src

** NXML / PreText
PreText is an xml markup for writing books.  ~nxml-mode~ is what handles it.

Autoclose created too many > characters
#+begin_src emacs-lisp
(sp-local-pair 'nxml-mode "<" ">" :post-handlers '(("[d1]" "/")))
#+end_src

This allows us to automatically end a tag by typing ~</~
#+begin_src emacs-lisp
(setq nxml-slash-auto-complete-flag t)
#+end_src

Compile PreText documents via `pretext build' by invoking ~C-c C-c~
#+begin_src emacs-lisp
(defun my-make-compile ()
  (setq compile-command "pretext build html")
  (local-set-key (kbd "C-c C-c") 'recompile))
(add-hook 'nxml-mode-hook 'my-make-compile)
#+end_src

* Org
Although org is a "language", it has the most subsections, so it deserves to be its own topline heading.

** Use org-ql package

#+begin_src emacs-lisp
(use-package! org-ql :after org)
#+end_src
** Org gui adjustments
Allows clicking headline bullets to fold/unfold
#+begin_src emacs-lisp
(require 'org-mouse)
#+end_src

Block delimiters (#+begin and #+end) should not extend to the whole line.
#+begin_src emacs-lisp
(setq org-fontify-whole-block-delimiter-line nil)
#+end_src

Protect the files from accidentally editing or deleting things we don't see.
#+begin_src emacs-lisp
(setq org-ctrl-k-protect-subtree t)
(setq org-fold-catch-invisible-edits 'show-and-error)
#+end_src

... and don't cache, that was causing problems for large files;
#+begin_src emacs-lisp
(setq org-element-use-cache nil)
#+end_src

*** GTD and more...
Don't use org for this. I use Todoist. Let's remove clutter.

*** Agenda
... I no longer use org agenda at all. Let's just ditch it.


** Org link handlers

First, we ask org to render our links:
#+begin_src emacs-lisp
; The following makes emacs follow (correctly!) the links setup in Obsidian and Logseq
(setq markdown-enable-wiki-links t
      markdown-wiki-link-search-type '(parent-directories sub-directories)
      markdown-enable-math t
      markdown-wiki-link-fontify-missing t
      )
#+end_src

This is the same code, just with different handlers; I should probably make it more generic, but I don't really care.

Obsidian:
#+begin_src emacs-lisp
  ;; obsidan link handling for obsidian:// links
  (defun org-obsidian-link-open (slash-message-id)
    "Handler for org-link-set-parameters that opens a obsidian:// link in obsidian"
    ;; remove any / at the start of slash-message-id to create real note-id
    (let ((message-id
           (replace-regexp-in-string (rx bos (* "/"))
                                     ""
                                     slash-message-id)))
      (do-applescript
       (concat "tell application \"Obsidian\" to open location \"obsidian://"
               message-id
               "\" activate"))))
  (org-link-set-parameters "obsidian" :follow #'org-obsidian-link-open)
#+end_src

Logseq:
#+begin_src emacs-lisp
  ;; obsidan link handling for logseq:// links
  (defun org-logseq-link-open (slash-message-id)
    "Handler for org-link-set-parameters that opens a logseq:// link in logseq"
    ;; remove any / at the start of slash-message-id to create real note-id
    (let ((message-id
           (replace-regexp-in-string (rx bos (* "/"))
                                     ""
                                     slash-message-id)))
      (do-applescript
       (concat "tell application \"Logseq\" to open location \"logseq://"
               message-id
               "\" activate"))))
  (org-link-set-parameters "logseq" :follow #'org-logseq-link-open)
#+end_src

Emails / message://
#+begin_src emacs-lisp
  ;; Email link handlink for message:// links
  (defun org-message-mail-open (slash-message-id)
    "Handler for org-link-set-parameters that opens a message:// link in apple mail"
    ;; remove any / at the start of slash-message-id to create real message-id
    (let ((message-id
           (replace-regexp-in-string (rx bos (* "/"))
                                     ""
                                     slash-message-id)))
      (do-applescript
       (concat "tell application \"mail\" to open location \"message://"
               message-id
               "\" activate"))))
  (org-link-set-parameters "message" :follow #'org-message-mail-open)
#+end_src

And Zotero
#+begin_src emacs-lisp
  (defun org-zotero-link-open (slash-message-id)
    "Handler for org-link-set-parameters that opens a zotero:// link in zotero"
    (let ((message-id
           (replace-regexp-in-string (rx bos (* "/"))
                                     ""
                                     slash-message-id)))
      (do-applescript
       (concat "tell application \"Zotero\" to open location \"zotero://"
               message-id
               "\" activate"))))
  (org-link-set-parameters "zotero" :follow #'org-zotero-link-open)
#+end_src

*** For org-cite
#+begin_src emacs-lisp
  (setq! org-cite-csl-styles-dir "~/Zotero/styles")
#+end_src
